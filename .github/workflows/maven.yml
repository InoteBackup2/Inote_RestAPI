# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

jobs:
  # Create folder on vps 
  create-folder:
    runs-on: ubuntu-latest
    steps:
    - name: Create folder on vps
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSHKEY }}
        port: ${{ secrets.PORT }}
        script: mkdir -p ${{ secrets.PATH }}
  
  #Build on github docker
  build:
    runs-on: ubuntu-latest
    needs: create-folder
    steps:

      - name: Clone repo on container
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          # cache: maven

      - name: Build & tests & packaging with Maven
        run: mvn -B package --file pom.xml -DskipTests
      
      - name: Rename jar
        run: mv target/*.jar target/Inote_api.jar
      
      - name: See content
        run: ls target
      
      # for fix the error empty archive
      # https://stackoverflow.com/questions/60253093/how-do-i-scp-repo-files-using-github-actions
      - name: Run a multi-line script
        run: |
          mkdir ../build
          cp -R ./target/*.jar ../build/
          ls ../build
          tar -cvf deploy.tar ../build/
      
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.PORT }}
          source: ${{ secrets.PATH }}
          target: "deploy.tar"
    